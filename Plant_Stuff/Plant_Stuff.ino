#include <Adafruit_CircuitPlayground.h>
#include <AsyncDelay.h>
#include <Wire.h>
#include <SPI.h>
float midi[127];
int A_four = 440;
const uint8_t spIT[]                PROGMEM ={0x2B,0x19,0xC1,0x99,0x3D,0xDE,0xEC,0xE2,0x14,0x2D,0xBA,0x88,0xE5,0xDB,0x55,0xD5,0x9C,0xC6,0xE2,0x4F,0x57,0x9D,0xB2,0x99,0x44,0x5F,0x49,0xAD,0x2D,0x1C,0xB1,0x6D,0xDA,0x0C,0xD1,0x98,0x7A,0xA9,0x66,0x00,0x50,0xC0,0x32,0x1E,0x1E,0x10,0x40,0x72,0x49,0x0F,0x00,0x00};
const uint8_t spIS[]                PROGMEM ={0x23,0x6B,0xCE,0x99,0x3B,0x16,0xAF,0xAC,0xDA,0x60,0x9E,0xFC,0xB1,0xF2,0xEC,0x9D,0xB5,0xF2,0xC6,0xC9,0x42,0x50,0x37,0xEF,0x46,0x37,0xBF,0xC5,0xAE,0x56,0xE3,0x7D,0x84,0x84,0xDF,0xEE,0x5D,0xEF,0x6B,0x5F,0xFB,0xD6,0x7F,0xA9,0x6E,0x64,0xEE,0x1C,0xB0,0x00,0xB9,0x03,0xBE,0x60,0x76,0xC0,0xF7,0xAC,0x0E,0xF8,0x9A,0xC4,0x00,0xDF,0xB0,0x21,0x40,0x7A,0x97,0x07,0x00,0x00};
const uint8_t spFIFTY[]             PROGMEM ={0x0C,0xA8,0x61,0x54,0x02,0x1A,0xF0,0xC0,0x8A,0x73,0x09,0x63,0xB1,0x67,0x37,0x59,0x49,0x2A,0x66,0xAC,0x39,0x66,0xA4,0xD6,0x99,0x55,0x6C,0x84,0x9C,0x2B,0x60,0x66,0x57,0x0D,0x48,0x80,0x03,0x00,0x0A,0xE8,0x34,0x4D,0x01,0x3D,0xA5,0xA4,0xB0,0x05,0x13,0x8A,0x79,0x33,0x8B,0x5E,0x87,0xAE,0x7A,0x61,0xC9,0xF8,0xE2,0x7B,0x3B,0xD8,0x59,0x8F,0x0F};
const uint8_t spSIXTY[]             PROGMEM ={0x06,0xF8,0x8A,0x5C,0x03,0x0E,0xF8,0xCE,0x44,0x01,0x4F,0x98,0x9D,0x24,0x3A,0x37,0xB7,0x78,0x72,0xE2,0x9C,0xCD,0xCC,0xE2,0xC9,0x8A,0x73,0x57,0x51,0xCD,0xBB,0x00,0x0C,0x30,0x25,0x28,0x00,0xC7,0x54,0x04,0xE0,0x5B,0x57,0x05,0x5C,0xC1,0x8C,0x00,0x0F,0xAA,0xC0,0x01,0x35,0x16,0x8D,0x2C,0xEA,0xA0,0xB4,0x6A,0xBC,0xAA,0x92,0x8C,0x39,0xE2,0x4D,0x69,0x4B,0x57,0xA6,0xA8,0xDB,0xA1,0x4F,0x41,0xD0,0xAE,0x63,0x9B,0x31,0x19,0xE2,0xAA,0x0A,0xFD};
const uint8_t spSEVENTY[]           PROGMEM ={0x0E,0xF8,0x41,0x38,0x02,0x1E,0xF0,0x80,0x07,0x2C,0xC0,0x81,0x13,0xBB,0xEC,0xA5,0x31,0xF1,0x6E,0x7C,0xE3,0x96,0xC6,0x64,0x6D,0xA4,0xB1,0x4D,0xE5,0x42,0xB8,0xAB,0x2D,0xEE,0x55,0xAB,0xBC,0x4F,0x33,0xD5,0xD9,0xA5,0x71,0x2E,0xC5,0x95,0x66,0x85,0xD6,0x58,0x98,0x94,0x8C,0xED,0x5B,0xD5,0x09,0x47,0x97,0x5C,0x96,0x44,0x2F,0x64,0x7A,0x84,0x5B,0x06,0x70,0x40,0xD1,0x69,0xA9,0xF6,0x4E,0xB8,0xD6,0x43,0xD5,0x3E,0x0F,0x71,0xB4,0x03,0x3C};
const uint8_t spEIGHTY[]            PROGMEM ={0x20,0x00,0x2B,0x2D,0x4E,0xD1,0x52,0x32,0x57,0xAC,0x39,0x59,0x4D,0xC6,0xDA,0xBD,0x66,0x25,0x2D,0x0B,0xC9,0x74,0xAB,0x1B,0xCF,0x44,0xD6,0x0A,0x10,0x28,0x2A,0x14,0xBD,0x38,0x41,0xD6,0xD2,0x59,0xED,0x7A,0x74,0xBD,0x19,0x43,0xF6,0xD2,0x3C,0xF8,0x49,0x4F,0x7C,0x79,0x00,0x00};
const uint8_t spNINETY[]            PROGMEM ={0xA1,0x73,0x1A,0x3A,0xCA,0x6A,0xE5,0x36,0xB7,0xAB,0x0E,0xB9,0xCA,0xB4,0xEC,0xDC,0xEA,0x56,0xA7,0xCA,0xBD,0x4A,0x24,0x9C,0x9C,0xA2,0x0E,0x4F,0x34,0x4F,0xBC,0x8B,0x55,0xB4,0xC2,0x2C,0xD9,0x96,0x57,0x95,0x1C,0x6A,0x66,0x05,0xF1,0x95,0x6E,0x0D,0x50,0x94,0x4A,0x04,0x4A,0xD1,0xAB,0xA2,0xB1,0xB6,0x9D,0x4D,0xE9,0x3D,0xE7,0xEC,0x0D,0xDB,0xB9,0xF7,0x83,0x1B,0xAB,0x06,0xB7,0x2D,0x27,0x66,0x1A,0x59,0x18,0xDD,0x95,0x99,0x79,0x74,0x13,0x72,0xA3,0x03,0x08,0x90,0x56,0xE3,0x01};
const uint8_t spDEGREES[]           PROGMEM ={0x0A,0x28,0x30,0x6C,0x74,0x53,0x25,0xB3,0x67,0xAC,0x95,0x0D,0x63,0x24,0x11,0x8B,0x57,0x31,0xBC,0xA1,0x54,0xAC,0x19,0xF5,0x70,0x06,0x3C,0xB6,0xC6,0x0D,0x91,0xA9,0xCE,0x52,0x28,0x36,0x32,0xDD,0x95,0x69,0xB2,0xF8,0xD8,0xBA,0x6C,0xDA,0x31,0x34,0x69,0xA9,0x53,0x30,0xE3,0x92,0x74,0xA9,0x2A,0x55,0x4D,0x92,0xD3,0x97,0xAA,0x46,0x13,0x2A,0x4D,0xBF,0xEA,0x1E,0x82,0xB1,0x74,0xEB,0xEA,0x86,0x09,0x82,0xF6,0x35,0x6B,0x18,0xCE,0x11,0x27,0x66,0x8D,0x69,0x38,0x47,0x9C,0x5C,0x3C,0x96,0xE9,0x1C,0xA1,0x73,0xF5,0xD8,0xA7,0x33,0xA4,0xCE,0xC5,0xE5,0x18,0x41,0x91,0x3B,0x1F,0xB7,0x73,0x04,0x25,0xAA,0x5C,0x53,0xDE,0x19,0x83,0x30,0x6C,0x6B,0x7A,0x87,0x77,0xE4,0x8C,0x3D,0xE5,0x1D,0xD1,0x50,0xCC,0xB7,0xA6,0x6F,0x38,0x27,0x76,0xDD,0x12,0xBE,0xA1,0x83,0x38,0x78,0xAF,0xF9,0x9A,0x0A,0x14,0xB7,0xCF,0xE9,0xBF,0x24,0x44,0x5C,0xF2,0xA6,0xFF,0x22,0x76,0xF3,0x70,0x93,0x7F,0x05,0x7C,0x8F,0xA4,0x01,0x01,0x6C,0xC8,0xC9,0x80,0x1F,0x3C,0xFE,0x1F};
AsyncDelay twoSeconds;
int lightVal = 0;
int moistureVal = 0;
float tempVal = 0;
int buttonA = 4;
int slideSwitch = 7;
volatile bool flag = 0;
int switchState = 0;
volatile bool switchFlag = 0;
void speak50(){
  CircuitPlayground.speaker.say(spIT);
  CircuitPlayground.speaker.say(spIS);
  CircuitPlayground.speaker.say(spFIFTY);
  CircuitPlayground.speaker.say(spDEGREES);
  CircuitPlayground.speaker.end();
}
void speak60(){
  CircuitPlayground.speaker.say(spIT);
  CircuitPlayground.speaker.say(spIS);
  CircuitPlayground.speaker.say(spSIXTY);
  CircuitPlayground.speaker.say(spDEGREES);
  CircuitPlayground.speaker.end();
}
void speak70(){
  CircuitPlayground.speaker.say(spIT);
  CircuitPlayground.speaker.say(spIS);
  CircuitPlayground.speaker.say(spSEVENTY);
  CircuitPlayground.speaker.say(spDEGREES);
  CircuitPlayground.speaker.end();
}
void speak80(){
  CircuitPlayground.speaker.say(spIT);
  CircuitPlayground.speaker.say(spIS);
  CircuitPlayground.speaker.say(spEIGHTY);
  CircuitPlayground.speaker.say(spDEGREES);
  CircuitPlayground.speaker.end();
}
void speak90(){
  CircuitPlayground.speaker.say(spIT);
  CircuitPlayground.speaker.say(spIS);
  CircuitPlayground.speaker.say(spNINETY);
  CircuitPlayground.speaker.say(spDEGREES);
  CircuitPlayground.speaker.end();
}
void sparkle(int rVal, int gVal, int bVal){
  for(int i = 0; i < 250; i++){
    int randomPixel = random(0, 10);
    CircuitPlayground.setPixelColor(randomPixel, rVal, gVal, bVal);
    delay(10);
    CircuitPlayground.clearPixels();
    if(flag){
      break;
    }
  }
}
void redAlert(){
  for(int j = 0; j < 255; j++){
    for(int i = 0; i < 10; i++){
      CircuitPlayground.setPixelColor(i, j, 0, 0);
      if(flag){
        break;
      }
    }
  }
}
void allGood(){
  for(int j = 0; j < 255; j++){
    for(int i = 0; i < 10; i++){
      CircuitPlayground.setPixelColor(i, 0, 0, j);
      if(flag){
        break;
      }
    }
  }
}
void generateMIDI(){
  for (int x = 0; x < 127; ++x){
    midi[x] = (A_four / 32.0) * pow(2.0, ((x - 9.0) / 12.0));
    Serial.println(midi[x]);
  }
}
int song[16]{52, 52, 64, 52, 52, 62, 52, 52, 60, 52, 52, 58, 52, 52, 59, 60};


void setup() {
  Serial.begin(9600);
  generateMIDI();
  pinMode(buttonA, INPUT_PULLDOWN);
  pinMode(slideSwitch, INPUT_PULLUP);
  CircuitPlayground.begin();
  attachInterrupt(digitalPinToInterrupt(buttonA), buttonPressed, FALLING);
  attachInterrupt(digitalPinToInterrupt(slideSwitch), switchMoved, CHANGE);
  twoSeconds.start(2000, AsyncDelay::MILLIS);
}

void loop() {
  if(twoSeconds.isExpired()){
    lightVal = CircuitPlayground.lightSensor();
    moistureVal = CircuitPlayground.readCap(6);
    tempVal = CircuitPlayground.temperatureF();
    lightVal = map(lightVal, 0, 1023, 0, 255);
    moistureVal = map(moistureVal, 600, 1020, 50, 400);
    if(lightVal < 0){
      lightVal = 0;
    }
    if(lightVal > 255){
      lightVal = 255;
    }
    if(moistureVal < 50){
      moistureVal = 50;
    }
    if(moistureVal > 400){
      moistureVal = 400;
    }
    Serial.print("Light Value: ");
    Serial.println(lightVal);
    Serial.print("Moisture Value: ");
    Serial.println(moistureVal);
    Serial.print("Temp Value: ");
    Serial.println(tempVal);

  while(!flag){
    if(lightVal < 120){
      sparkle((255-lightVal), 0, 0);
    }
    else{
      sparkle(0, lightVal, 0);
    }
    if(switchFlag){
      delay(5);
      switchState = CircuitPlayground.slideSwitch();
      switchFlag = 0;
    }
    if(!switchState){
      if(tempVal < 50){
        redAlert();
      }
      else if(tempVal < 60){
        speak50();
      }
      else if(tempVal < 70){
        speak60();
      }
      else if(tempVal < 80){
        speak70();
      }
      else if(tempVal < 90){
        speak80();
      }
      else if(tempVal< 100){
        speak90();
      }
      else{
        redAlert();
      }
    }
  }
    flag = 0;
    CircuitPlayground.speaker.set(255);


  if(moistureVal < 200){
    if(switchFlag){
      delay(5);
      switchState = CircuitPlayground.slideSwitch();
      switchFlag = 0; 
      }
    while(!flag){
      redAlert();
      if(!switchState){
        for(int i = 0; i < 16; i++){
          CircuitPlayground.playTone(midi[song[i]], moistureVal);
          delay(moistureVal);
          if(flag){
            break;
          }
        }
      }
    }
  }
  else{
    while(!flag){
      allGood();
      if(!switchState){
        for(int i = 0; i < 16; i++){
          CircuitPlayground.playTone(midi[song[i]], moistureVal);
          delay(moistureVal);
          if(flag){
            break;
          }
        }
      }
    }
  }
  flag = 0;
  CircuitPlayground.clearPixels();
  twoSeconds.restart();
  }
}

void buttonPressed(){
  flag = 1;
}
void switchMoved(){
  switchFlag = 1;
}

void goop(){
  int yay;
}
